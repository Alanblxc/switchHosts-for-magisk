name: Release

on:
  push:
    tags:
      - 'v*'  # 监听以 v 开头的标签推送

jobs:
  build:
    name: Release
    runs-on: ubuntu-latest  # 修改运行环境为 Ubuntu

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in update.json
        shell: bash  # 修改 shell 为 bash
        run: |
          # 从 module.prop 文件中获取版本信息
          version=$(grep -oP 'version=\K.*' module.prop)
          versionCode=$(grep -oP 'versionCode=\K.*' module.prop)
          
          echo "Current version: $version"
          echo "Current version code: $versionCode"
          
          # 构建下载链接
          zipUrl="https://github.com/Alanblxc/switchHosts-for-magisk/releases/download/${{ github.ref_name }}/SwitchHosts-${{ github.ref_name }}.zip"
          
          # 更新 update.json 文件
          cat > update.json << EOF
          {
            "version": "$version",
            "versionCode": $versionCode,
            "zipUrl": "$zipUrl",
            "changelog": "https://hub.gitmirror.com/?q=https://raw.githubusercontent.com/Alanblxc/switchHosts-for-magisk/main/changelog.md"
          }
          EOF

          cat update.json  # 显示更新后的内容

      - name: Commit update.json changes
        shell: bash  # 修改 shell 为 bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config pull.rebase true  # 设置pull策略为rebase
          git add update.json
          git commit -m "Update version in update.json to ${{ github.ref_name }}" || echo "No changes to commit"
          git pull --rebase origin main  # 拉取远程更改并使用rebase策略
          git push origin HEAD:main  # 推送到main分支

      - name: List all files before zip
        shell: bash  # 修改 shell 为 bash
        run: |
          find . -type f -print

      - name: Zip module
        shell: bash  # 修改 shell 为 bash
        run: |
          # 确保所有文件都被包含，只排除特定文件
          excludeFiles=".git .github .vscode *.md .gitignore .gitattributes changelog.md update.json"
          filesToZip=$(find . -type f | grep -vE "$excludeFiles")

          # 显示将要打包的文件
          echo "Files to be zipped:"
          echo "$filesToZip"

          # 创建临时目录用于打包
          mkdir -p temp_for_zip

          # 复制所有需要的文件到临时目录
          for file in $filesToZip; do
            cp --parents "$file" temp_for_zip/
          done

          # 使用 APK 模式打包（使用 -9 最高压缩级别和 -X 排除额外属性）
          cd temp_for_zip && zip -r -9 -X ../SwitchHosts-${{ github.ref_name }}.zip * && cd ..

          # 清理临时目录
          rm -rf temp_for_zip

      - name: Verify zip contents
        shell: bash  # 修改 shell 为 bash
        run: |
          mkdir -p verify_zip
          unzip SwitchHosts-${{ github.ref_name }}.zip -d verify_zip
          find verify_zip -type f -print

      - name: Read changelog
        id: changelog
        shell: bash  # 修改 shell 为 bash
        run: |
          changelog=$(cat changelog.md)
          # 对 changelog 内容进行格式化处理，移除不兼容的字符
          formattedChangelog=$(echo "$changelog" | sed 's/##//g' | sed 's/\*/-/g')
          echo "Changelog content: $formattedChangelog"  # 调试信息
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$formattedChangelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 新增步骤：检查是否已存在相同标签的 release
      - name: Check if release exists
        id: check_release
        shell: bash
        run: |
          release_exists=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
          
          echo "HTTP Status Code: $release_exists"
          
          if [ "$release_exists" = "200" ]; then
            echo "Release already exists for tag ${{ github.ref_name }}"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "No existing release found for tag ${{ github.ref_name }}"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 删除已存在的 release（如果存在）
      - name: Delete existing release
        if: steps.check_release.outputs.exists == 'true'
        shell: bash
        run: |
          # 获取 release ID
          release_id=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')
          
          echo "Deleting existing release with ID: $release_id"
          
          # 删除 release
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          
          echo "Existing release deleted successfully"

      - name: Create Release and Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}  # 使用 github.ref_name 获取标签名称
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          generate_release_notes: false
          draft: false
          prerelease: false
          files: |
            SwitchHosts-${{ github.ref_name }}.zip
            LICENSE
