name: Release

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Release
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整历史记录，便于版本比较
        token: ${{ secrets.GITHUB_TOKEN }}  # 确保有足够权限进行推送

    - name: Update version in update.json
      shell: pwsh
      run: |
        $version = "${{ github.ref_name }}"
        if ([string]::IsNullOrEmpty($version)) {
          $version = "v" + (Get-Content -Path .\module.prop | Select-String -Pattern "version=(.+)" | ForEach-Object { $_.Matches.Groups[1].Value })
        }
        Write-Host "Current version: $version"
        $content = Get-Content -Path .\update.json -Raw
        $content = $content -replace '"version": ".*?"', "`"version`": `"$version`""
        $content = $content -replace 'SwitchHosts-.*?.zip', "SwitchHosts-$version.zip"
        $content | Set-Content -Path .\update.json -Force
        Get-Content -Path .\update.json  # 显示更新后的内容
        
    - name: Commit update.json changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add update.json
        git commit -m "Update version in update.json to ${{ github.ref_name }}" || echo "No changes to commit"
        git push origin HEAD:master

    - name: List all files before zip
      shell: pwsh
      run: |
        Get-ChildItem -Path . -Recurse | Select-Object FullName

    - name: Zip module
      shell: pwsh
      run: |
        # 确保所有文件都被包含，只排除特定文件
        $excludeFiles = @(".git", ".github", ".vscode", "*.md", ".gitignore", ".gitattributes", "changelog.md", "update.json")
        $filesToZip = Get-ChildItem -Path . -Exclude $excludeFiles
        
        # 显示将要打包的文件
        Write-Host "Files to be zipped:"
        $filesToZip | ForEach-Object { Write-Host $_.FullName }
        
        # 创建临时目录用于打包
        New-Item -ItemType Directory -Path .\temp_for_zip -Force
        
        # 复制所有需要的文件到临时目录
        $filesToZip | ForEach-Object {
            if ($_.PSIsContainer) {
                Copy-Item -Path $_.FullName -Destination .\temp_for_zip\ -Recurse -Force
            } else {
                Copy-Item -Path $_.FullName -Destination .\temp_for_zip\ -Force
            }
        }
        
        # 打包临时目录中的所有文件
        Compress-Archive -Path .\temp_for_zip\* -DestinationPath SwitchHosts-${{ github.ref_name }}.zip -Force
        
        # 清理临时目录
        Remove-Item -Path .\temp_for_zip -Recurse -Force

    - name: Verify zip contents
      shell: pwsh
      run: |
        # 验证 zip 文件内容
        Expand-Archive -Path SwitchHosts-${{ github.ref_name }}.zip -DestinationPath .\verify_zip -Force
        Get-ChildItem -Path .\verify_zip -Recurse | Select-Object FullName

    - name: Read changelog
      id: changelog
      shell: pwsh
      run: |
        $changelog = Get-Content -Path .\changelog.md -Raw
        echo "Changelog content: $changelog"  # 调试信息
        echo "changelog=$changelog" >> $env:GITHUB_OUTPUT

    - name: Create Release and Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref }}
        body: |
          ${{ steps.changelog.outputs.changelog }}
        generate_release_notes: false
        draft: false
        prerelease: false
        files: |
          SwitchHosts-${{ github.ref_name }}.zip
          LICENSE